import usb
import sys
import time
import random
from ctypes import c_ubyte, c_uint32

class ThirdSpaceVest:
    # Table for forming the packet checksum 
    crc8_table = [0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D]

    cache_key_table= [0x55, 0x02, 0x15, 0x2E, 0x41, 0x3D, 0x0B, 0x6D, 0x17, 0x02, 0x5F, 0x24, 0x12, 0x3E, 0x6F, 0x5F, 0x2E, 0x1C,
                      0x57, 0x6B, 0x27, 0x08, 0x71, 0x52, 0x7A, 0x2E, 0x5B, 0x62, 0x62, 0x7B, 0x70, 0x26, 0x5B, 0x19,
                      0x4C, 0x6B, 0x21, 0x76, 0x4C, 0x3C, 0x31, 0x3E, 0x0A, 0x64, 0x46, 0x5B, 0x64, 0x72, 0x5C, 0x7B, 
                      0x75, 0x2F, 0x2F, 0x09, 0x1A, 0x29, 0x3C, 0x31, 0x6E, 0x2B, 0x3E, 0x60, 0x4D, 0x41, 0x31, 0x41,
                      0x53, 0x37, 0x51, 0x40, 0x5C, 0x1A, 0x1B, 0x09, 0x05, 0x35, 0x49, 0x09, 0x29, 0x14, 0x5A, 0x6A,
                      0x64, 0x03, 0x07, 0x1A, 0x13, 0x0F, 0x4E, 0x45, 0x51, 0x03, 0x69, 0x55, 0x7A, 0x6B, 0x56, 0x78,
                      0x2A, 0x14, 0x51, 0x19, 0x3D, 0x08, 0x54, 0x64, 0x50, 0x15, 0x1D, 0x46, 0x3E, 0x46, 0x27, 0x6A, 
                      0x23, 0x68, 0x2F, 0x3C, 0x5C, 0x05, 0x2F, 0x68, 0x03, 0x6B, 0x65, 0x5B, 0x76, 0x26, 0x4C, 0x3F, 
                      0x51, 0x00, 0x21, 0x03, 0x6E, 0x07, 0x5E, 0x50, 0x6B, 0x06, 0x41, 0x13, 0x23, 0x09, 0x45, 0x79, 
                      0x32, 0x5C, 0x27, 0x6D, 0x75, 0x0C, 0x61, 0x1B, 0x06, 0x64, 0x31, 0x70, 0x43, 0x70, 0x12, 0x17, 
                      0x48, 0x7C, 0x41, 0x7C, 0x6F, 0x15, 0x38, 0x4B, 0x56, 0x06, 0x35, 0x71, 0x58, 0x5B, 0x33, 0x19, 
                      0x11, 0x61, 0x6F, 0x2F, 0x5D, 0x22, 0x63, 0x5F, 0x59, 0x6C, 0x4D, 0x15, 0x60, 0x4A, 0x28, 0x7E, 
                      0x0E, 0x09, 0x30, 0x05, 0x40, 0x33, 0x62, 0x57, 0x11, 0x16, 0x79, 0x5E, 0x5D, 0x3D, 0x71, 0x48, 
                      0x40, 0x75, 0x06, 0x00, 0x16, 0x49, 0x35, 0x32, 0x7C, 0x04, 0x39, 0x4B, 0x4D, 0x35, 0x0E, 0x76,
                      0x25, 0x25, 0x70, 0x1F, 0x61, 0x62, 0x5C, 0x72, 0x1B, 0x37, 0x0D, 0x5B, 0x31, 0x30, 0x7F, 0x07, 
                      0x3F, 0x19, 0x6E, 0x61, 0x1F, 0x7F, 0x57, 0x16, 0x6F, 0x2D, 0x75, 0x10, 0x0A, 0x2F, 0x44, 0x7D, 
                      0x0C, 0x51, 0x00, 0x48, 0x52, 0x20, 0x26, 0x1D, 0x76, 0x67, 0x71, 0x69, 0x56, 0x32, 0x5D, 0x57, 
                      0x0E, 0x4E, 0x26, 0x53, 0x78, 0x45, 0x49, 0x09, 0x32, 0x65, 0x01, 0x66, 0x17, 0x39, 0x4A, 0x14, 
                      0x43, 0x0E, 0x60, 0x01, 0x13, 0x6F, 0x40, 0x59, 0x21, 0x27, 0x25, 0x06, 0x4B, 0x45, 0x0B, 0x36, 
                      0x2C, 0x12, 0x2E, 0x54, 0x21, 0x1C, 0x0B, 0x0C, 0x45, 0x2E, 0x5D, 0x4B, 0x74, 0x54, 0x20, 0x3C, 
                      0x4A, 0x5A, 0x10, 0x4B, 0x23, 0x4D, 0x2A, 0x24, 0x1C, 0x78, 0x28, 0x34, 0x10, 0x67, 0x09, 0x25, 
                      0x1B, 0x66, 0x06, 0x65, 0x1A, 0x02, 0x1D, 0x20, 0x28, 0x06, 0x08, 0x40, 0x21, 0x7E, 0x45, 0x73, 
                      0x21, 0x37, 0x10, 0x24, 0x04, 0x3B, 0x63, 0x7F, 0x67, 0x58]

    #Device as retreived from the bus listing
    tsv_device = None

    #Set to true to print out debug messages
    debug = False

    #VID/PID for amBX Controller
    TSV_VENDOR_ID = 0x1BD7
    TSV_PRODUCT_ID = 0x5000
    
    #Conveinence strings for device endpoints
    ep = { 'in'  : 0x82, \
               'out' : 0x01
               }

    #Constructor
    def __init__(self):
        return

    def open(self, index = 0):
        """ Given an index, opens the related ambx device. The index refers
        to the position of the device on the USB bus. Index 0 is default, 
        and will open the first device found.

        Returns True if open successful, False otherwise.
        """
        self.tsv_device = usb.core.find(idVendor = self.TSV_VENDOR_ID, 
                                               idProduct = self.TSV_PRODUCT_ID)
        if self.tsv_device is None:
            return False
        
        self.tsv_device.detach_kernel_driver(0)
        self.tsv_device.set_configuration(1)
        # self.tsv_device.claim_interface(0)
        return True

    def close(self):
        """Closes the third_space device currently held by the object, 
        if it is open."""
        if self.tsv_device is not None:
            self.tsv_device = None

    def write(self, command):
        """Given a list of raw bytes, writes them to the out endpoint of the
        third_space controller.

        Returns total number of bytes written.
        """
        # if self.debug:
        #     [sys.stdout.write("0x%.2x " % ord(x)) for x in command]        
        #     print
        return self.tsv_device.write(self.ep['out'], command, 0, 100)

    def read(self, size=64):
        """Reads in the requested amount of bytes
        from the in endpoint of the third_space device.
        
        Returns list of bytes read.
        """
        status = self.tsv_device.read(self.ep['in'], size, 0, 100)
        return status

    def form_checksum(self, index, speed):
        cell_index = index & 0x0F
        a = (self.crc8_table[cell_index] << 4) & 0xFF
        b = (self.crc8_table[cell_index] >> 4) ^ (speed >> 4)
        c = a ^ self.crc8_table[b]
        d = (c << 4) & 0xFF
        final_crc = self.crc8_table[((c >> 4) ^ speed) & 0x0F] ^ d
        return final_crc

    # Yanked from http://stackoverflow.com/questions/2588364/python-tea-implementation
    def tea_encipher(self, v, k):
        y=c_uint32(v[0]);
        z=c_uint32(v[1]);
        sum=c_uint32(0);
        delta=0x9E3779B9;
        n=32
        w=[0,0]
        
        while(n>0):
            sum.value += delta
            y.value += ( z.value << 4 ) + k[0] ^ z.value + sum.value ^ ( z.value >> 5 ) + k[1]
            z.value += ( y.value << 4 ) + k[2] ^ y.value + sum.value ^ ( y.value >> 5 ) + k[3]
            n -= 1

        w[0]=y.value
        w[1]=z.value
        return w

    # Yanked from http://stackoverflow.com/questions/2588364/python-tea-implementation
    def tea_decipher(self, v, k):
        y=c_uint32(v[0])
        z=c_uint32(v[1])
        sum=c_uint32(0xC6EF3720)
        delta=0x9E3779B9
        n=32
        w=[0,0]
        
        while(n>0):
            z.value -= ( y.value << 4 ) + k[2] ^ y.value + sum.value ^ ( y.value >> 5 ) + k[3]
            y.value -= ( z.value << 4 ) + k[0] ^ z.value + sum.value ^ ( z.value >> 5 ) + k[1]
            sum.value -= delta
            n -= 1

        w[0]=y.value
        w[1]=z.value
        return w

    def form_cipher_cache_key(self):
        index = random.randint(0, 255) #0xD5
        key_offset = [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12]
        return [index, [self.cache_key_table[x + index] for x in key_offset]]

    def form_packet(self, index, speed):
        packet = [0x0,
                  0x0,
                  0x0,
                  0x0,
                  index,
                  speed,
                  self.form_checksum(index, speed),
                  0x0]
        return packet

    def encrypt_packet(self, packet):
        cache_key = self.form_cipher_cache_key()
        encrypted_packet = [0x02, cache_key[0]] + encrypt(
        
    def send_actuator_command(self, index, speed):
        """Given a fan address and a speed, sets the fan to that speed"""
        # Create our 64-bit packet, with checksum for the speed, and encrypt it
        packet = self.encrypt_packet(self.form_packet())
        # Send it to the device
        self.write(packet)

def main(argv=None):
    tsv_device = ThirdSpaceVest()

    # tsv_device.debug = True
    if tsv_device.open() is False:
        print "No third_space device connected"
        return
    
    tsv_device.close()
    
if __name__ == "__main__":
    sys.exit(main())
